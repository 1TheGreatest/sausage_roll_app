// Mocks generated by Mockito 5.4.3 from annotations
// in sausage_roll_test/test/mocks/basket_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sausage_roll_test/models/basket_item.dart' as _i3;
import 'package:sausage_roll_test/models/sausage_roll.dart' as _i4;
import 'package:sausage_roll_test/providers/basket_provider.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BasketProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockBasketProvider extends _i1.Mock implements _i2.BasketProvider {
  MockBasketProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.BasketItem> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: <_i3.BasketItem>[],
      ) as List<_i3.BasketItem>);

  @override
  double get grandTotalPrice => (super.noSuchMethod(
        Invocation.getter(#grandTotalPrice),
        returnValue: 0.0,
      ) as double);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addToBasket(
    _i4.SausageRoll? item,
    int? quantity,
    bool? isEatOut,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addToBasket,
          [
            item,
            quantity,
            isEatOut,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getTotalQuantity() => (super.noSuchMethod(
        Invocation.method(
          #getTotalQuantity,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void updateItemQuantity(
    (String, bool)? key,
    int? newQuantity,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateItemQuantity,
          [
            key,
            newQuantity,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getTotalItemsCountExcludingItem((String, bool)? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalItemsCountExcludingItem,
          [key],
        ),
        returnValue: 0,
      ) as int);

  @override
  void remove((String, bool)? key) => super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
